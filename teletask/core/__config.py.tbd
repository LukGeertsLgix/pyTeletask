
"""
Module for reading configfiles (teletask.yaml).
* it will parse the given file
* and add the found devices to the devies vector of Teletask.
"""

import yaml

#from teletask.devices import (Light, Notification, Scene, Sensor, Switch)

from teletask.devices import (Light)
from teletask.exceptions import TeletaskException

class Config:
    """Class for parsing teletask.yaml."""

    def __init__(self, teletask):
        """Initialize Config class."""
        self.teletask = teletask

    def read(self, file='teletask.yaml'):
        """Read config."""
        self.teletask.logger.debug("Reading %s", file)
        try:
            with open(file, 'r') as filehandle:
                doc = yaml.load(filehandle)
                self.parse_groups(doc)
        except FileNotFoundError as ex:
            self.teletask.logger.error("Error while reading %s: %s", file, ex)

    def parse_groups(self, doc):
        """Parse the group section of teletask.yaml."""
        for group in doc["groups"]:
            self.parse_group(doc, group)

    def parse_group(self, doc, group):
        """Parse a group entry of teletask.yaml."""
        try:
            if group.startswith("light"):
                self.parse_group_light(doc["groups"][group])
            elif group.startswith("switch"):
                self.parse_group_switch(doc["groups"][group])
            # elif group.startswith("sensor"):
            #     self.parse_group_binary_sensor(doc["groups"][group])
            # elif group.startswith("notification"):
            #     self.parse_group_notification(doc["groups"][group])
            # elif group.startswith("scene"):
            #     self.parse_group_scene(doc["groups"][group])
        except TeletaskException as ex:
            self.teletask.logger.error("Error while reading config file: Could not parse %s: %s", group, ex)

    def parse_group_light(self, entries):
        """Parse a light section of teletask.yaml."""
        for entry in entries:
            light = Light.from_config(
                self.teletask,
                entry,
                entries[entry])
            self.teletask.devices.add(light)

    # def parse_group_switch(self, entries):
    #     """Parse a switch section of teletask.yaml."""
    #     for entry in entries:
    #         switch = Switch.from_config(
    #             self.teletask,
    #             entry,
    #             entries[entry])
    #         self.teletask.devices.add(switch)

    # def parse_group_binary_sensor(self, entries):
    #     """Parse a binary_sensor section of teletask.yaml."""
    #     for entry in entries:
    #         binary_sensor = BinarySensor.from_config(
    #             self.teletask,
    #             entry,
    #             entries[entry])
    #         self.teletask.devices.add(binary_sensor)

    # def parse_group_cover(self, entries):
    #     """Parse a cover section of teletask.yaml."""
    #     for entry in entries:
    #         cover = Cover.from_config(
    #             self.teletask,
    #             entry,
    #             entries[entry])
    #         self.teletask.devices.add(cover)

    # def parse_group_climate(self, entries):
    #     """Parse a climate section of teletask.yaml."""
    #     for entry in entries:
    #         climate = Climate.from_config(
    #             self.teletask,
    #             entry,
    #             entries[entry])
    #         self.teletask.devices.add(climate)

    # def parse_group_datetime(self, entries):
    #     """Parse a datetime section of teletask.yaml."""
    #     for entry in entries:
    #         datetime = DateTime.from_config(
    #             self.teletask,
    #             entry,
    #             entries[entry])
    #         self.teletask.devices.add(datetime)

    # def parse_group_sensor(self, entries):
    #     """Parse a sensor section of teletask.yaml."""
    #     for entry in entries:
    #         sensor = Sensor.from_config(
    #             self.teletask,
    #             entry,
    #             entries[entry])
    #         self.teletask.devices.add(sensor)

    # def parse_group_expose_sensor(self, entries):
    #     """Parse a exposed sensor section of teletask.yaml."""
    #     for entry in entries:
    #         expose_sensor = ExposeSensor.from_config(
    #             self.teletask,
    #             entry,
    #             entries[entry])
    #         self.teletask.devices.add(expose_sensor)

    # def parse_group_notification(self, entries):
    #     """Parse a sensor section of teletask.yaml."""
    #     for entry in entries:
    #         notification = Notification.from_config(
    #             self.teletask,
    #             entry,
    #             entries[entry])
    #         self.teletask.devices.add(notification)

    # def parse_group_scene(self, entries):
    #     """Parse a scene section of teletask.yaml."""
    #     for entry in entries:
    #         scene = Scene.from_config(
    #             self.teletask,
    #             entry,
    #             entries[entry])
    #         self.teletask.devices.add(scene)